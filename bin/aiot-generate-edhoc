#!/usr/bin/env python3

# Copyright 2017 IoT-Lab Team
# Contributor(s) : see AUTHORS file
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# 1. Redistributions of source code must retain the above copyright notice,
# this list of conditions and the following disclaimer.
#
# 2. Redistributions in binary form must reproduce the above copyright notice,
# this list of conditions and the following disclaimer in the documentation
# and/or other materials provided with the distribution.
#
# 3. Neither the name of the copyright holder nor the names of its contributors
# may be used to endorse or promote products derived from this software without
# specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.

import os
from cryptography.hazmat.primitives import serialization
from pyaiot.common.edhoc_keys import (generate_ed25519_priv_key,
                                      priv_key_serialize_pem,
                                      pub_key_serialize_pem,
                                      write_edhoc_credentials,
                                      add_peer_cred,
                                      rmv_peer_cred,
                                      DEFAULT_AUTHKEY_FILENAME,
                                      DEFAULT_AUTHCRED_FILENAME,
                                      DEFAULT_GATEWAY_RPK_KID)


def main():
    """Main function."""
    authkey = generate_ed25519_priv_key()
    authcred = authkey.public_key()
    write_edhoc_credentials(authkey)
    rpk_bytes = authcred.public_bytes(
        encoding=serialization.Encoding.Raw,
        format=serialization.PublicFormat.Raw,
    )
    rmv_peer_cred(DEFAULT_GATEWAY_RPK_KID)
    add_peer_cred(rpk_bytes, DEFAULT_GATEWAY_RPK_KID)
    message = ("EDHOC credentials generation done:\n\n"
               "   - Authentication Key:  \t\n{}\n"
               "   - Credentials: \t\n{}\n"
               "The keys have been written in {} and {}")

    print(message.format(priv_key_serialize_pem(authkey),
                         pub_key_serialize_pem(authcred),
                         DEFAULT_AUTHKEY_FILENAME,
                         DEFAULT_AUTHCRED_FILENAME))


if __name__ == "__main__":
    main()
